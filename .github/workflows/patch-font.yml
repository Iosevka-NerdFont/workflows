name: "Patch Iosevka"
on:
  workflow_call:

permissions:
  contents: write

env:
  WORK_DIR: "/tmp/iosevka-patch"
  IOSEVKA_RELEASE_METADATA_PATH: "/tmp/iosevka-patch/iosevka-latest-release.json"
  BASE_INPUT_DIR: "/tmp/iosevka-patch/input"
  BASE_OUTPUT_DIR: "/tmp/iosevka-patch/output"
  FONTFORGE_NAME: "FontForge.AppImage"
  FONT_PATCHER_SCRIPT: "font-patcher"

defaults:
  run:
    shell: bash

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      needs_patch: ${{ steps.version-check.outputs.needs_patch }}
      release_tag: ${{ steps.version-check.outputs.release_tag }}
      asset_name: ${{ steps.version-check.outputs.asset_name }}
    steps:
      - name: Create work dir
        run: mkdir -p ${{ env.WORK_DIR }}
      - name: Get Iosevka latest release metadata
        run: |
          curl -fsSL \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/be5invis/Iosevka/releases/latest > "${{ env.IOSEVKA_RELEASE_METADATA_PATH }}"
      - name: Check if release is already patched
        id: version-check
        run: |
          RELEASE_TAG="$(jq -r '.tag_name' "${{ env.IOSEVKA_RELEASE_METADATA_PATH }}")"
          echo "release_tag=${RELEASE_TAG}" >> "$GITHUB_OUTPUT"
          curl -fsSL \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/tags | jq 'map(.name)' > latest_versions.json
          if [ "$(eval 'jq -c "map(select(. == \"${RELEASE_TAG}\")) | length > 0" latest_versions.json')" == "true" ] ; then
            echo "::warning ::Latest release already patched."
            echo "needs_patch=false" >> "${GITHUB_OUTPUT}"
            exit 0
          fi
          IOSEVKA_VERSION="${RELEASE_TAG#v}"
          echo "New release: ${IOSEVKA_VERSION}"
          if grep '-' <<< "${IOSEVKA_VERSION}"; then
            echo "::warning ::Latest release is a prerelease. It will be skipped"
            echo "needs_patch=false" >> "${GITHUB_OUTPUT}"
            exit 0
          fi
          echo "needs_patch=true" >> "${GITHUB_OUTPUT}"
          echo "asset_name=${GITHUB_REPOSITORY#"${GITHUB_REPOSITORY_OWNER}/"}" >> "${GITHUB_OUTPUT}"
          echo "asset_name=$(grep 'asset_name=' ${GITHUB_OUTPUT})"

  setup_tools:
    needs: check
    if: ${{ needs.check.outputs.needs_patch }}
    runs-on: ubuntu-latest
    steps:
      - name: Create work dir
        run: mkdir -p ${{ env.WORK_DIR }}
      - name: Download latest FontForge AppImage
        run: |
          FONTFORGE_URL="$(curl -fsSL \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/fontforge/fontforge/releases/latest | jq -r '.assets[] | select(.name | test("FontForge.*\\.AppImage")) | .url')"
          curl -fsSL \
            -H "Accept: application/octet-stream" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -o "${{ env.WORK_DIR }}/${{ env.FONTFORGE_NAME }}" \
            "${FONTFORGE_URL}"
      - name: Upload FontForge AppImage
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FONTFORGE_NAME }}
          path: ${{ env.WORK_DIR }}/${{ env.FONTFORGE_NAME }}
      - name: Download latest Nerd Font patcher
        env:
          FONT_PATCHER_NAME: FontPatcher.zip
        run: |
          FONT_PATCHER_URL="$(curl -fsSL \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/ryanoasis/nerd-fonts/releases/latest | jq -r '.assets[] | select(.name == "FontPatcher.zip") | .url')"
          curl -fsSL \
            -H "Accept: application/octet-stream" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -o "${{ env.WORK_DIR }}/${{ env.FONT_PATCHER_NAME }}" \
            "${FONT_PATCHER_URL}"
          unzip -o "${{ env.WORK_DIR }}/${{ env.FONT_PATCHER_NAME }}" -d "${{ env.WORK_DIR }}/${{ env.FONT_PATCHER_SCRIPT }}"
      - name: Upload FontPatcher
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FONT_PATCHER_SCRIPT }}
          path: ${{ env.WORK_DIR }}/${{ env.FONT_PATCHER_SCRIPT }}

  patch:
    needs: [check, setup_tools]
    if: ${{ needs.check.outputs.needs_patch }}
    runs-on: ubuntu-latest
    steps:
      - name: Install libfuse2
        run: |
          sudo apt update
          sudo apt install -y libfuse2
      - name: Create work dir
        run: mkdir -p ${{ env.WORK_DIR }}
      - name: Download FontForge and FontPatcher artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - name: Setup workspace
        run: |
          mkdir -p ${{ env.BASE_INPUT_DIR }}
          mkdir -p ${{ env.BASE_OUTPUT_DIR }}
          chmod u+x ${GITHUB_WORKSPACE}/${{ env.FONTFORGE_NAME }}
      - name: Download font files
        id: download-font
        run: |
          RELEASE_TAG="${{ needs.check.outputs.release_tag }}"
          IOSEVKA_VERSION="${RELEASE_TAG#v}"
          ASSET_URL="$(curl -fsSL \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/be5invis/Iosevka/releases/tags/${{ needs.check.outputs.release_tag }} | \
            eval 'jq -r ".assets | map(select(.name | test(\"PkgTTF-${{ needs.check.outputs.asset_name }}-${IOSEVKA_VERSION}\\\\.zip\"))) | .[0].url"'
          )"
          echo "ASSET_URL=${ASSET_URL}"
          if [ "${ASSET_URL}" == "null" ] ; then
            echo "Asset 'PkgTTF-${{ needs.check.outputs.asset_name }}-${IOSEVKA_VERSION}.zip' not found" >&2
            exit 1
          fi
          curl -fsSL \
            -H "Accept: application/octet-stream" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -o "${{ env.BASE_INPUT_DIR }}/${{ needs.check.outputs.asset_name }}.zip" \
            "${ASSET_URL}"
          unzip -o "${{ env.BASE_INPUT_DIR }}/${{ needs.check.outputs.asset_name }}.zip" -d "${{ env.BASE_INPUT_DIR }}/${{ needs.check.outputs.asset_name }}"
      - name: Patch fonts
        run: |
          echo "Patching ${{ needs.check.outputs.asset_name }} into ${{ env.BASE_OUTPUT_DIR }}/${{ needs.check.outputs.asset_name }}"
          mkdir -p "${{ env.BASE_OUTPUT_DIR }}/${{ needs.check.outputs.asset_name }}"
          find "${{ env.BASE_INPUT_DIR }}/${{ needs.check.outputs.asset_name }}" -type f | \
          parallel echo "Patching {}" \; "${GITHUB_WORKSPACE}/${{ env.FONTFORGE_NAME }}" -script "${GITHUB_WORKSPACE}/font-patcher" "{}" --quiet --no-progressbars --complete -out "${{ env.BASE_OUTPUT_DIR }}/${{ needs.check.outputs.asset_name }}"
      - name: Share output
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.check.outputs.asset_name }}
          path: ${{ env.BASE_OUTPUT_DIR }}/${{ needs.check.outputs.asset_name }}
          retention-days: 1

  commit:
    runs-on: ubuntu-latest
    needs: [check, patch]
    if: ${{ needs.check.outputs.needs_patch }}
    steps:
      - name: Remove temporary artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            ${{ env.FONT_PATCHER_SCRIPT }}
            ${{ env.FONTFORGE_NAME }}
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Remove old font files
        run: |
          find ./ -mindepth 1 -maxdepth 1 -type d -not -name '.*' -exec rm -r {} \;
      - name: Load artifacts
        uses: actions/download-artifact@v4
      - name: Git config
        run: |
          git config --global user.name "CI"
          git config --global user.email "${{ github.triggering_actor }}@users.noreply.github.com"
      - name: Commit, Tag and Push
        run: |
          git add --all
          git commit -m "chore: update patched fonts"
          git tag "${{ needs.check.outputs.release_tag }}" -m "Patched ${{ needs.check.outputs.asset_name }} ${{ needs.check.outputs.release_tag }}"
          git push --follow-tags
